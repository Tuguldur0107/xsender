import express from "express";
import axios from "axios";
import { getSessionStep, updateSessionStep } from "../lib/session";
import { fetchUserProfile } from "../lib/facebook";
import { upsertUser, saveEtaxRegister, saveEtaxPassword } from "../lib/user";
import { saveEtax2FAMethod } from "../lib/user";

const router = express.Router();

const PAGE_ACCESS_TOKEN = process.env.FB_PAGE_ACCESS_TOKEN;
const PAGE_ID = process.env.PAGE_ID;

const processedMessageIds = new Set<string>(); // ‚úÖ Flood —Ç–∞—Å–ª–∞—Ö

// ‚úÖ FB-–¥ reply –∏–ª–≥—ç—ç—Ö —Ç—É—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü
async function sendFbMessage(senderId: string, message: string) {
  try {
    const fbRes = await axios.post(
      `https://graph.facebook.com/v18.0/${PAGE_ID}/messages`,
      {
        messaging_type: "RESPONSE",
        recipient: { id: senderId },
        message: { text: message },
      },
      {
        headers: {
          Authorization: `Bearer ${PAGE_ACCESS_TOKEN}`,
        },
      }
    );
    console.log("‚úÖ FB —Ö–∞—Ä–∏—É:", fbRes.data);
  } catch (err: any) {
    console.error("‚ùå FB API –∞–ª–¥–∞–∞:", err.response?.data || err.message);
  }
}

router.post("/", async (req, res) => {
  const body = req.body;

  if (body.object === "page") {
    for (const entry of body.entry || []) {
      const webhook_event = entry.messaging?.[0];
      const senderId = webhook_event?.sender?.id;
      const messageId = webhook_event?.message?.mid;
      const msg = webhook_event?.message?.text?.trim();

      // üõë ”®”©—Ä—Å–¥–∏–π–Ω –º–µ—Å—Å–µ–∂ –±–æ–ª skip
      if (webhook_event?.message?.is_echo) {
        console.log("‚ö†Ô∏è is_echo: true ‚Äî skip");
        continue;
      }

      // üõë Flood-—Ç–æ–π message –¥–∞–≤—Ö—Ü–∞–∂ –±–∞–π–≤–∞–ª skip
      if (!messageId || processedMessageIds.has(messageId)) {
        console.log("‚ö†Ô∏è –î–∞–≤—Ö–∞—Ä–¥—Å–∞–Ω message: ", messageId);
        continue;
      }
      processedMessageIds.add(messageId);

      if (!senderId || !msg) {
        console.warn("‚ö†Ô∏è senderId —ç—Å–≤—ç–ª message –±–∞–π—Ö–≥“Ø–π");
        continue;
      }

      // ‚úÖ Session logic
      const step = await getSessionStep(senderId);

      if (!step) {
        const fb_name = await fetchUserProfile(senderId);
        await upsertUser(senderId, fb_name);
        await updateSessionStep(senderId, "terms");
        await sendFbMessage(senderId, `üìÉ –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É ${fb_name}! “Æ–π–ª—á–∏–ª–≥—ç—ç–Ω–∏–π –Ω”©—Ö—Ü–ª–∏–π–≥ –∑”©–≤—à”©”©—Ä–Ω”© “Ø“Ø. "–ó”©–≤—à”©”©—Ä—á –±–∞–π–Ω–∞" –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø.`);
        continue;
      }

      if (step === "terms" && msg === "–ó”©–≤—à”©”©—Ä—á –±–∞–π–Ω–∞") {
        await updateSessionStep(senderId, "etax_login");
        await sendFbMessage(senderId, "üÜî –†–µ–≥–∏—Å—Ç—Ä—ç—ç –±–∏—á–Ω—ç “Ø“Ø:");
        continue;
      }

      if (step === "etax_login") {
        await saveEtaxRegister(senderId, msg);
        await updateSessionStep(senderId, "etax_password");
        await sendFbMessage(senderId, "üîê Etax –Ω—É—É—Ü “Ø–≥—ç—ç –±–∏—á–Ω—ç “Ø“Ø:");
        continue;
      }

      if (step === "etax_password") {
        await saveEtaxPassword(senderId, msg);
        await updateSessionStep(senderId, "2fa_select");
        await sendFbMessage(senderId, "üì≤ 2FA –∞—Ä–≥–∞–∞ —Å–æ–Ω–≥–æ–Ω–æ —É—É: 1 - –ú—ç–π–ª, 2 - QR, 3 - SMS");
        continue;
      }

      if (step === "2fa_select") {
        if (["1", "2", "3"].includes(msg)) {
          await saveEtax2FAMethod(senderId, msg);
          await updateSessionStep(senderId, `2fa_${msg}`);

          if (msg === "1") {
            await sendFbMessage(senderId, "üìß –ú—ç–π–ª—ç—ç—Ä –∏—Ä—Å—ç–Ω 6 –æ—Ä–æ–Ω—Ç–æ–π –∫–æ–¥—ã–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É:");
          } else if (msg === "2") {
            await sendFbMessage(senderId, "üì∑ QR –∫–æ–¥ —É–Ω—à—É—É–ª–∞—Ö –∑–∞–∞–≤–∞—Ä... (—Ç“Ø—Ä placeholder)");
          } else if (msg === "3") {
            await sendFbMessage(senderId, "üì© 383890 –≥—ç—Å—ç–Ω –∫–æ–¥—ã–≥ 131315 –¥—É–≥–∞–∞—Ä –ª—É—É –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.");
          }
        } else {
          await sendFbMessage(senderId, "‚ö†Ô∏è 1, 2 —ç—Å–≤—ç–ª 3 –≥—ç–∂ —Å–æ–Ω–≥–æ–∂ –±–∏—á–Ω—ç “Ø“Ø.");
        }
        continue;
      }

      // üìå Default message
      await sendFbMessage(senderId, "ü§ñ –ö–æ–º–∞–Ω–¥–∞–∞ —Ç–∞–Ω—å–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π. /start –≥—ç–∂ –±–∏—á—ç—ç–¥ —ç—Ö–ª“Ø“Ø–ª–Ω—ç “Ø“Ø.");
    }

    return res.sendStatus(200);
  }

  return res.sendStatus(404);
});

export default router;
